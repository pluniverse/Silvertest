{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\b20lo\\\\Documents\\\\GitHub\\\\Silvertest\\\\src\\\\components\\\\AudioPlayer\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport SoundOnIcon from '../images/Icons/s_on.png';\nimport SoundOffIcon from '../images/Icons/s_off.png';\nimport styles from './AudioPlayer.module.css';\nimport bgmusic from './audios/end.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AudioPlayer({\n  audioState = 'pause'\n}) {\n  _s();\n\n  const playerRef = useRef(null);\n  const [playing, setPlaying] = useState(false);\n  useEffect(() => {\n    if (audioState === 'play') {\n      setPlaying(true);\n    } else if (audioState === 'pause') {\n      setPlaying(false);\n    }\n  }, [audioState]);\n  useEffect(() => {\n    if (playing) {\n      playerRef.current.play();\n    } else {\n      playerRef.current.pause();\n    }\n\n    return () => {\n      if (playerRef.current && !playerRef.current.paused) {\n        playerRef.current.pause();\n      }\n    };\n  }, [playerRef, playing]);\n\n  const togglePlaying = () => setPlaying(!playing);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      className: styles.hidden,\n      autoPlay: true,\n      loop: true,\n      ref: playerRef,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: bgmusic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.playerIcon,\n      children: playing ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: SoundOnIcon,\n        onClick: togglePlaying,\n        alt: \"Sound On\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: SoundOffIcon,\n        onClick: togglePlaying,\n        alt: \"Sound Off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 88\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AudioPlayer, \"jaDlqDuKx0oWM81pkzlVScWGFqs=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["C:/Users/b20lo/Documents/GitHub/Silvertest/src/components/AudioPlayer/index.js"],"names":["React","useEffect","useRef","useState","SoundOnIcon","SoundOffIcon","styles","bgmusic","AudioPlayer","audioState","playerRef","playing","setPlaying","current","play","pause","paused","togglePlaying","hidden","playerIcon"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,UAAU,GAAG;AAAf,CAArB,EAA+C;AAAA;;AAC7C,QAAMC,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGQ,UAAU,KAAK,MAAlB,EAA0B;AACxBG,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAFD,MAGK,IAAGH,UAAU,KAAK,OAAlB,EAA2B;AAC9BG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AAEF,GARQ,EAQN,CAACH,UAAD,CARM,CAAT;AAUAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGU,OAAH,EAAY;AACVD,MAAAA,SAAS,CAACG,OAAV,CAAkBC,IAAlB;AACD,KAFD,MAEO;AACLJ,MAAAA,SAAS,CAACG,OAAV,CAAkBE,KAAlB;AACD;;AAEH,WAAO,MAAM;AACT,UAAGL,SAAS,CAACG,OAAV,IAAqB,CAACH,SAAS,CAACG,OAAV,CAAkBG,MAA3C,EAAmD;AAC/CN,QAAAA,SAAS,CAACG,OAAV,CAAkBE,KAAlB;AACH;AACJ,KAJD;AAKD,GAZQ,EAYN,CAACL,SAAD,EAAYC,OAAZ,CAZM,CAAT;;AAcA,QAAMM,aAAa,GAAG,MAAML,UAAU,CAAC,CAACD,OAAF,CAAtC;;AAEA,sBACE;AAAA,4BACE;AAAO,MAAA,SAAS,EAAEL,MAAM,CAACY,MAAzB;AAAiC,MAAA,QAAQ,MAAzC;AAA0C,MAAA,IAAI,MAA9C;AAA+C,MAAA,GAAG,EAAER,SAApD;AAAA,6BACE;AAAQ,QAAA,GAAG,EAAEH;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAED,MAAM,CAACa,UAAvB;AAAA,gBACGR,OAAO,gBAAG;AAAK,QAAA,GAAG,EAAEP,WAAV;AAAuB,QAAA,OAAO,EAAEa,aAAhC;AAA+C,QAAA,GAAG,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAuE;AAAK,QAAA,GAAG,EAAEZ,YAAV;AAAwB,QAAA,OAAO,EAAEY,aAAjC;AAAgD,QAAA,GAAG,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA;AADjF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAUD;;GAxCQT,W;;KAAAA,W;AA0CT,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport SoundOnIcon from '../images/Icons/s_on.png';\r\nimport SoundOffIcon from '../images/Icons/s_off.png';\r\nimport styles from './AudioPlayer.module.css';\r\nimport bgmusic from './audios/end.mp3';\r\n\r\nfunction AudioPlayer({ audioState = 'pause' }) {\r\n  const playerRef = useRef(null);\r\n  const [playing, setPlaying] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if(audioState === 'play') {\r\n      setPlaying(true)\r\n    }\r\n    else if(audioState === 'pause') {\r\n      setPlaying(false)\r\n    }\r\n\r\n  }, [audioState]);\r\n\r\n  useEffect(() => {\r\n      if(playing) {\r\n        playerRef.current.play();\r\n      } else {\r\n        playerRef.current.pause();\r\n      }\r\n\r\n    return () => {\r\n        if(playerRef.current && !playerRef.current.paused) {\r\n            playerRef.current.pause()\r\n        }\r\n    };\r\n  }, [playerRef, playing]);\r\n\r\n  const togglePlaying = () => setPlaying(!playing)\r\n\r\n  return (\r\n    <>\r\n      <audio className={styles.hidden} autoPlay loop ref={playerRef}>\r\n        <source src={bgmusic} />\r\n      </audio>\r\n      <div className={styles.playerIcon}>\r\n        {playing ? <img src={SoundOnIcon} onClick={togglePlaying} alt=\"Sound On\" /> :  <img src={SoundOffIcon} onClick={togglePlaying} alt=\"Sound Off\" /> }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AudioPlayer;\r\n"]},"metadata":{},"sourceType":"module"}